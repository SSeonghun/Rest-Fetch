import asyncio
import base64
import requests  # API 호출을 위한 라이브러리
from bleak import BleakClient
from datetime import datetime

# ESP32-CAM의 BLE 장치 주소와 특성 UUID 설정
BLE_ADDRESS = "30:C9:22:E2:90:CE"
CHARACTERISTIC_UUID = "abcdef01-1234-5678-1234-56789abcdef1"

# API 엔드포인트 및 헤더 설정
API_URL = "http://j11c209.p.ssafy.io:8080/observer/report"
HEADERS = {"Content-Type": "application/json"}

# 옵저버 시리얼 넘버 설정
OBSERVER_SERIAL_NUMBER = "OBSERVER20241010 "


async def send_image_to_api(image_data):
    try:


        # Base64로 인코딩된 이미지를 JSON 형식으로 변환
        encoded_image = base64.b64encode(image_data).decode('utf-8')

        # API에 전송할 JSON 데이터 생성
        json_data = {
            "observerSerialNumber": OBSERVER_SERIAL_NUMBER,
            "picture": encoded_image
        }

        # 디버깅: 전송되는 이미지 데이터 및 JSON 출력
        print(f"Encoded image (first 100 chars): {encoded_image[:100]}...")  # 첫 100자의 인코딩된 이미지 데이터
        print(f"Observer Serial Number: {OBSERVER_SERIAL_NUMBER}")
        print(f"Sending JSON data: {json_data}")

        # API에 POST 요청 전송
        response = requests.post(API_URL, json=json_data, headers=HEADERS)

        # 응답 확인
        if response.status_code == 200:
            print("Image successfully uploaded to the server")
        else:
            print(f"Failed to upload image. Status code: {response.status_code}, Response: {response.text}")

    except Exception as e:
        print(f"Error during API call: {e}")


async def main():
    async with BleakClient(BLE_ADDRESS) as client:
        print(f"Connected to {BLE_ADDRESS}")

        while True:
            image_data = bytearray()

            def notification_handler(sender: int, data: bytearray):
                nonlocal image_data
                data_str = data.decode('utf-8', errors='ignore')

                if "IMG_START" in data_str:
                    print("Image transfer started")
                    image_data.clear()  # 데이터 초기화
                elif "IMG_END" in data_str:
                    print("Image transfer completed")
                    asyncio.create_task(send_image_to_api(image_data))  # 이미지 API로 전송
                else:
                    print(f"Received {len(data)} bytes")
                    image_data.extend(data)  # 데이터 누적

            await client.start_notify(CHARACTERISTIC_UUID, notification_handler)
            print("Listening for image data...")

            await asyncio.sleep(60)  # 60초 대기

            await client.stop_notify(CHARACTERISTIC_UUID)
            print("Waiting for next image...")


# 이벤트 루프 실행
asyncio.run(main())
